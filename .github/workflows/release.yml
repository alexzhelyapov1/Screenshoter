name: Create Release

on:
  push:
    tags:
      - 'v*' # Trigger on tags like v1.0, v2.3.4

jobs:
  build-and-release-windows:
    permissions:
      contents: write # Needed to create releases and upload assets
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSYS2 and MinGW
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          base-devel
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja

    - name: Install Chocolatey
      shell: powershell
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
      
    - name: Install Inno Setup
      shell: cmd
      run: choco install innosetup -y

    - name: Configure and Build
      shell: msys2 {0}
      run: |
        mkdir build
        cd build
        cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=Release
        cmake --build . --config Release

    - name: Install Certificate Chain
      shell: powershell
      env:
        ROOT_CA_CERT_BASE64: ${{ secrets.ROOT_CA_CERT_BASE64 }}
      run: |
        if ($env:ROOT_CA_CERT_BASE64) {
          Write-Host "Importing Root CA certificate..."
          try {
            $rootCertBytes = [System.Convert]::FromBase64String($env:ROOT_CA_CERT_BASE64)
            $rootCertPath = Join-Path $env:RUNNER_TEMP "RootCA.cer"
            [System.IO.File]::WriteAllBytes($rootCertPath, $rootCertBytes)
            Import-Certificate -FilePath $rootCertPath -CertStoreLocation Cert:\LocalMachine\Root -ErrorAction Stop
            Remove-Item $rootCertPath -Force
            Write-Host "Root CA certificate imported successfully."
          } catch {
            Write-Error "Failed to import Root CA certificate: $($_.Exception.Message)"
            throw $_
          }
        } else {
          throw "Required secret ROOT_CA_CERT_BASE64 is missing."
        }

    - name: Sign Application Executable
      shell: powershell
      env:
        PFX_BASE64: ${{ secrets.PFX_BASE64 }}
        PFX_PASSWORD: ${{ secrets.PFX_PASSWORD }}
        SIGNTOOL_PATH: 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe'
        TIMESTAMP_SERVER: http://timestamp.sectigo.com
      run: |
        $pfxPath = Join-Path $env:RUNNER_TEMP "signing_cert.pfx"
        $exePath = ".\build\UpdateServiceScreen.exe"

        try {
          $pfxBytes = [System.Convert]::FromBase64String($env:PFX_BASE64)
          [System.IO.File]::WriteAllBytes($pfxPath, $pfxBytes)

          if (Test-Path $exePath) {
            Write-Host "Signing $exePath using signtool..."
            & $env:SIGNTOOL_PATH sign /f $pfxPath /p $env:PFX_PASSWORD /tr $env:TIMESTAMP_SERVER /td sha256 /fd sha256 $exePath
            if ($LASTEXITCODE -ne 0) { throw "Signtool failed for $exePath with exit code $LASTEXITCODE" }
            Write-Host "Successfully signed $exePath."
          } else {
            Write-Warning "$exePath not found for signing."
            throw "$exePath not found" # Лучше остановить сборку, если EXE не найден
          }
        } catch {
            Write-Error "An error occurred during application signing: $($_.Exception.Message)"
            throw $_
        } finally {
            if (Test-Path $pfxPath) { Remove-Item $pfxPath -Force -ErrorAction SilentlyContinue }
        }
    
    - name: Extract version from tag
      id: get_version
      run: |
        $tagName = "${{ github.ref_name }}"
        if ($tagName.StartsWith('v')) {
          $version = $tagName.Substring(1)
        } else {
          $version = $tagName
        }
        echo "Извлеченная версия: $version"
        echo "VERSION_TAG=$version" >> $env:GITHUB_ENV
        echo "INSTALLER_NAME=screenshoter-windows-setup-$version.exe" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Compile Inno Setup Installer
      shell: powershell
      run: |
        echo "Building version: ${{ env.VERSION_TAG }}"
        $issFile = "WinSetup.iss"
        Write-Host "Compiling Inno Setup script: $issFile"
        & iscc.exe "/DMyAppVersion=${{ env.VERSION_TAG }}" $issFile
        # Проверяем код завершения iscc.exe
        if ($LASTEXITCODE -ne 0) { throw "Inno Setup compiler failed with exit code $LASTEXITCODE" }
        Write-Host "Inno Setup compilation successful."

    - name: Sign Installer Executable
      shell: powershell
      env:
        PFX_BASE64: ${{ secrets.PFX_BASE64 }}
        PFX_PASSWORD: ${{ secrets.PFX_PASSWORD }}
        SIGNTOOL_PATH: 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe'
        TIMESTAMP_SERVER: http://timestamp.sectigo.com
      run: |
        $pfxPath = Join-Path $env:RUNNER_TEMP "signing_cert.pfx"
        # Путь к скомпилированному установщику (исходя из OutputDir и OutputBaseFilename в .iss)
        $installerPath = ".\build\${{ env.INSTALLER_NAME }}"

        try {
          # PFX уже должен быть доступен или декодировать снова, если предыдущий шаг его удалил
          # Безопаснее декодировать снова
          $pfxBytes = [System.Convert]::FromBase64String($env:PFX_BASE64)
          [System.IO.File]::WriteAllBytes($pfxPath, $pfxBytes)

          if (Test-Path $installerPath) {
            Write-Host "Signing installer $installerPath using signtool..."
            & $env:SIGNTOOL_PATH sign /f $pfxPath /p $env:PFX_PASSWORD /tr $env:TIMESTAMP_SERVER /td sha256 /fd sha256 $installerPath
            if ($LASTEXITCODE -ne 0) { throw "Signtool failed for $installerPath with exit code $LASTEXITCODE" }
            Write-Host "Successfully signed $installerPath."
          } else {
            Write-Warning "$installerPath not found for signing."
            throw "$installerPath not found"
          }
        } catch {
            Write-Error "An error occurred during installer signing: $($_.Exception.Message)"
            throw $_
        } finally {
            if (Test-Path $pfxPath) { Remove-Item $pfxPath -Force -ErrorAction SilentlyContinue }
        }

    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ./build/${{ env.INSTALLER_NAME }}
          ./sources/trust_alex.cer
        generate_release_notes: true